const TASKS = [{
  id: 1,
  emoji: '0Ô∏è‚É£',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —á–∏—Å–ª–∞ –º–µ–Ω—å—à–µ —á–µ–º 0.5 –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä <selection>></selection> ‚Äî –ë–æ–ª—å—à–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(number)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const number = Math.random().toFixed(3)
    return {
      varData: {
        number
      },
      code: `
        var number = ${number};
      `
    }
  },
  testedCodeFunction: (varData, number) => (varData.number > 0.5) && (number > 0.5),
  confirm: false
}, {
  id: 2,
  emoji: '‚úèÔ∏è',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–µ–Ω –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä <selection>!=</selection> ‚Äî –Ω–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(name)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const names = ['Anton', '', '', '', '', '', 'Gena', 'Stas', 'Anna', 'Dasha', 'Irina', 'Evgeniy', 'Igor']

    const name = names[parseInt(Math.random() * names.length)]

    return {
      varData: {
        name
      },
      code: `
        var name = "${name}";
      `
    }
  },
  testedCodeFunction: (varData, name) => (varData.name !== '') === (name !== ''),
  confirm: false
}, {
  id: 3,
  emoji: 'üîû',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –ª—é–¥–µ–π –º–ª–∞–¥—à–µ 18 –∏ –±–µ–∑ –∏–º–µ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã <selection>></selection> ‚Äî –ë–æ–ª—å—à–µ <selection>!=</selection> ‚Äî –Ω–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø—Ä–µ–∞—Ç–æ—Ä <selection>&&</selection> ‚Äî –ò. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(name, age)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const names = ['Anton', '', '', '', '', '', 'Gena', 'Stas', 'Anna', 'Dasha', 'Irina', 'Evgeniy', 'Igor']
    const ages = Array(20).fill(0).map((_, key) => key + 16)

    const name = names[parseInt(Math.random() * names.length)]
    const age = ages[parseInt(Math.random() * ages.length)]

    return {
      varData: {
        name,
        age
      },
      code: `
        var name = "${name}";
        var age = ${age};
      `
    }
  },
  testedCodeFunction: (varData, name, age) => (varData.name !== '' && varData.age > 18) && (name !== '' && age > 18),
  confirm: false
}, {
  id: 4,
  emoji: '‚ûï',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä <selection>==</selection> ‚Äî —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(a + b)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const symbols = ['+', '-', '/', '*', '%']
    const as = Array(200).fill(0).map((_, key) => key - 100)
    const bs = Array(200).fill(0).map((_, key) => key - 100)

    const symbol = symbols[parseInt(Math.random() * symbols.length)]
    const b = bs[parseInt(Math.random() * bs.length)]
    const a = as[parseInt(Math.random() * as.length)]

    return {
      varData: {
        a,
        b,
        symbol
      },
      code: `
        var a = ${a};
        var b = ${b};
        var symbol = "${symbol}";
      `
    }
  },
  testedCodeFunction: (varData, sum) => varData.a + varData.b === sum && varData.symbol === '+',
  confirm: false
}, {
  id: 5,
  emoji: 'üì¨',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å, –∫–∞–∂–¥—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å @. –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ <selection>match</selection> ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(email)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const emails = ['prohetamine@yandex.ru', 'lolikekdev@gmail.com', 'AlexPetrowIvanov@mail.ru', 'Misha Jol', 'Piter Pen', 'maksim1488', 'vlad1992@site.org', '982322', 'rine1', '3', '-_____-', '777badman777.com', 'qwerty527$mail.ru']

    const email = emails[parseInt(Math.random() * emails.length)]

    return {
      varData: {
        email
      },
      code: `
        var email = "${email}";
      `
    }
  },
  testedCodeFunction: (varData, email) => !!varData.email.match(/@/) && !!email.match(/@/),
  confirm: false
}, {
  id: 6,
  emoji: '‚ûó',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä <selection>==</selection> ‚Äî —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(a / b)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const symbols = ['+', '-', '/', '*', '%']
    const as = Array(20).fill(0).map((_, key) => key - 10)
    const bs = Array(20).fill(0).map((_, key) => key)

    const symbol = symbols[parseInt(Math.random() * symbols.length)]
    const b = bs[parseInt(Math.random() * bs.length)]
    const a = as[parseInt(Math.random() * as.length)]

    return {
      varData: {
        a,
        b,
        symbol
      },
      code: `
        var a = ${a};
        var b = ${b};
        var symbol = "${symbol}";
      `
    }
  },
  testedCodeFunction: (varData, sum) => varData.a / varData.b === sum && varData.symbol === '/',
  confirm: false
}, {
  id: 7,
  emoji: 'üìù',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 5 —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ä–µ–∞—Ç–æ—Ä <selection>>=</selection> ‚Äî –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∏ –º–µ—Ç–æ–¥ <selection>length</selection> ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(word)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const words = `–£ –ª—É–∫–æ–º–æ—Ä—å—è –¥—É–± –∑–µ–ª—ë–Ω—ã–π –ó–ª–∞—Ç–∞—è —Ü–µ–ø—å –Ω–∞ –¥—É–±–µ —Ç–æ–º –ò –¥–Ω—ë–º –∏ –Ω–æ—á—å—é –∫–æ—Ç —É—á—ë–Ω—ã–π –í—Å—ë —Ö–æ–¥–∏—Ç –ø–æ —Ü–µ–ø–∏ –∫—Ä—É–≥–æ–º –ò–¥—ë—Ç –Ω–∞–ø—Ä–∞–≤–æ  –ø–µ—Å–Ω—å –∑–∞–≤–æ–¥–∏—Ç –ù–∞–ª–µ–≤–æ  —Å–∫–∞–∑–∫—É –≥–æ–≤–æ—Ä–∏—Ç –¢–∞–º —á—É–¥–µ—Å–∞ —Ç–∞–º –ª–µ—à–∏–π –±—Ä–æ–¥–∏—Ç –†—É—Å–∞–ª–∫–∞ –Ω–∞ –≤–µ—Ç–≤—è—Ö —Å–∏–¥–∏—Ç –¢–∞–º –Ω–∞ –Ω–µ–≤–µ–¥–æ–º—ã—Ö –¥–æ—Ä–æ–∂–∫–∞—Ö –°–ª–µ–¥—ã –Ω–µ–≤–∏–¥–∞–Ω–Ω—ã—Ö –∑–≤–µ—Ä–µ–π –ò–∑–±—É—à–∫–∞ —Ç–∞–º –Ω–∞ –∫—É—Ä—å–∏—Ö –Ω–æ–∂–∫–∞—Ö –°—Ç–æ–∏—Ç –±–µ–∑ –æ–∫–æ–Ω –±–µ–∑ –¥–≤–µ—Ä–µ–π –¢–∞–º –ª–µ—Å –∏ –¥–æ–ª –≤–∏–¥–µ–Ω–∏–π –ø–æ–ª–Ω—ã –¢–∞–º –æ –∑–∞—Ä–µ –ø—Ä–∏—Ö–ª—ã–Ω—É—Ç –≤–æ–ª–Ω—ã –ù–∞ –±—Ä–µ–≥ –ø–µ—Å—á–∞–Ω—ã–π –∏ –ø—É—Å—Ç–æ–π –ò —Ç—Ä–∏–¥—Ü–∞—Ç—å –≤–∏—Ç—è–∑–µ–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö –ß—Ä–µ–¥–æ–π –∏–∑ –≤–æ–¥ –≤—ã—Ö–æ–¥—è—Ç —è—Å–Ω—ã—Ö –ò —Å –Ω–∏–º–∏ –¥—è–¥—å–∫–∞ –∏—Ö –º–æ—Ä—Å–∫–æ–π –¢–∞–º –∫–æ—Ä–æ–ª–µ–≤–∏—á –º–∏–º–æ—Ö–æ–¥–æ–º –ü–ª–µ–Ω—è–µ—Ç –≥—Ä–æ–∑–Ω–æ–≥–æ —Ü–∞—Ä—è –¢–∞–º –≤ –æ–±–ª–∞–∫–∞—Ö –ø–µ—Ä–µ–¥ –Ω–∞—Ä–æ–¥–æ–º –ß–µ—Ä–µ–∑ –ª–µ—Å–∞ —á–µ—Ä–µ–∑ –º–æ—Ä—è –ö–æ–ª–¥—É–Ω –Ω–µ—Å—ë—Ç –±–æ–≥–∞—Ç—ã—Ä—è –í —Ç–µ–º–Ω–∏—Ü–µ —Ç–∞–º —Ü–∞—Ä–µ–≤–Ω–∞ —Ç—É–∂–∏—Ç –ê –±—É—Ä—ã–π –≤–æ–ª–∫ –µ–π –≤–µ—Ä–Ω–æ —Å–ª—É–∂–∏—Ç –¢–∞–º —Å—Ç—É–ø–∞ —Å –ë–∞–±–æ—é –Ø–≥–æ–π –ò–¥—ë—Ç –±—Ä–µ–¥—ë—Ç —Å–∞–º–∞ —Å–æ–±–æ–π –¢–∞–º —Ü–∞—Ä—å –ö–∞—â–µ–π –Ω–∞–¥ –∑–ª–∞—Ç–æ–º —á–∞—Ö–Ω–µ—Ç –¢–∞–º —Ä—É—Å—Å–∫–∏–π –¥—É—Ö —Ç–∞–º –†—É—Å—å—é –ø–∞—Ö–Ω–µ—Ç –ò —Ç–∞–º —è –±—ã–ª –∏ –º—ë–¥ —è –ø–∏–ª –£ –º–æ—Ä—è –≤–∏–¥–µ–ª –¥—É–± –∑–µ–ª—ë–Ω—ã–π –ü–æ–¥ –Ω–∏–º —Å–∏–¥–µ–ª –∏ –∫–æ—Ç —É—á—ë–Ω—ã–π –°–≤–æ–∏ –º–Ω–µ —Å–∫–∞–∑–∫–∏ –≥–æ–≤–æ—Ä–∏–ª`.split(' ')

    const word = words[parseInt(Math.random() * words.length)]

    return {
      varData: {
        word
      },
      code: `
        var word = "${word}";
      `
    }
  },
  testedCodeFunction: (varData, word) => varData.word.length >= 5 && word.length >= 5,
  confirm: false
}, {
  id: 8,
  emoji: '‚úñÔ∏è',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä <selection>==</selection> ‚Äî —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(a * b)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const symbols = ['+', '-', '/', '*', '%']
    const as = Array(20).fill(0).map((_, key) => key - 10)
    const bs = Array(20).fill(0).map((_, key) => key)

    const symbol = symbols[parseInt(Math.random() * symbols.length)]
    const b = bs[parseInt(Math.random() * bs.length)]
    const a = as[parseInt(Math.random() * as.length)]

    return {
      varData: {
        a,
        b,
        symbol
      },
      code: `
        var a = ${a};
        var b = ${b};
        var symbol = "${symbol}";
      `
    }
  },
  testedCodeFunction: (varData, sum) => varData.a * varData.b === sum && varData.symbol === '*',
  confirm: false
}, {
  id: 9,
  emoji: '‚ûñ',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Ç–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä <selection>==</selection> ‚Äî —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(a - b)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const symbols = ['+', '-', '/', '*', '%']
    const as = Array(20).fill(0).map((_, key) => key - 10)
    const bs = Array(20).fill(0).map((_, key) => key)

    const symbol = symbols[parseInt(Math.random() * symbols.length)]
    const b = bs[parseInt(Math.random() * bs.length)]
    const a = as[parseInt(Math.random() * as.length)]

    return {
      varData: {
        a,
        b,
        symbol
      },
      code: `
        var a = ${a};
        var b = ${b};
        var symbol = "${symbol}";
      `
    }
  },
  testedCodeFunction: (varData, sum) => varData.a - varData.b === sum && varData.symbol === '-',
  confirm: false
}, {
  id: 10,
  emoji: 'üö´',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä <selection>==</selection> ‚Äî —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∏ —Ñ—É–Ω–∫—Ü–∏—é <selection>typeof</selection> ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(number)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const numbers = [1,2,44,50,32,7,9, ...(`–ß–µ–º—É —Ä–∞–≤–Ω–æ —á–∏—Å–ª–æ –ø–∏? –í –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞—è—Ö —Ö–≤–∞—Ç–∞–µ—Ç –∑–Ω–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3 –∑–Ω–∞–∫–∞ (3,14). –ù–æ –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ —Ç–∞–º, –≥–¥–µ –Ω—É–∂–Ω–∞ –±–û–ª—å—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º 3 —Ü–∏—Ñ—Ä—ã.`.split(' '))]

    const number = numbers[parseInt(Math.random() * numbers.length)]

    return {
      varData: {
        number
      },
      code: `
        var number = ${typeof(number) === 'number' ? `${number}`: `"${number}"`};
      `
    }
  },
  testedCodeFunction: (varData, number) => typeof(varData.number) === 'number' && number === varData.number,
  confirm: false
}, {
  id: 11,
  emoji: 'üíé',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ true. –ò—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä <selection>===</selection> ‚Äî —Å—Ç—Ä–æ–≥–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(data)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const isOks = ["true", true, true, true, "false", false, 0, 1, "", "–∏—Å—Ç–∏–Ω–∞"]

    const isOk = isOks[parseInt(Math.random() * isOks.length)]

    return {
      varData: {
        isOk
      },
      code: `
        var isOk = ${typeof(isOk) === 'string' ? `"${isOk}"`: `${isOk}`};
      `
    }
  },
  testedCodeFunction: (varData, isOk) => varData.isOk === true && isOk === true,
  confirm: false
}, {
  id: 12,
  emoji: 'ü¶†',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ª—é–±—ã–µ —Å–ª–æ–≤–∞ –∫—Ä–æ–º–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä–æ–Ω–æ–≤–∏—Ä—É—Å–æ–º, –∏–∑–±–µ—Ä–≥–∞–π—Ç–µ —Å–ª–æ–≤–∞ –Ω–∞—á–∏–Ω–∞—é–∏—â–µ—Å—è –Ω–∞ <selection>–∫–æ—Ä–æ–Ω–∞–≤–∏</selection> –∏ <selection>COVID-19</selection>. –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ <selection>match</selection> ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä <selection>!</selection> ‚Äî –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(word)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const words = '–ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å COVID-19–°–∏–º–ø—Ç–æ–º—ã –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ COVID-19 –°–∏–º–ø—Ç–æ–º—ã –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ COVID-19 –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –°–∏–º–ø—Ç–æ–º—ã –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å COVID-19 –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –±–æ–ª–µ–∑–Ω–∏ COVID-19 –æ—Ç –û–†–í–ò –∏ –≥—Ä–∏–ø–ø–∞  COVID-19 –ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å –º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ–∫–∞—Ç—å –≤ –±–æ–ª–µ–µ —Ç—è–∂–µ–ª–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ–∂–µ–ª–∏ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ –æ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–µ–∑–æ–±–∏–¥–Ω–æ–π –ø—Ä–æ—Å—Ç—É–¥—ã.  –í –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ –æ—Ç –û–†–í–ò   –ë–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω–∫—É–±–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å—É –∂–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ 2 –Ω–µ–¥–µ–ª—å. –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –Ω–µ–≤—ã—Å–æ–∫–∞—è 37-37,5¬∞–° —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º —á–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º, —Å—É—Ö–∏–º, –º—É—á–∏—Ç–µ–ª—å–Ω—ã–º –ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å, –û–†–í–ò, –≥—Ä–∏–ø–ø) –ø–æ–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ –æ—Ç –≥—Ä–∏–ø–ø–∞  –ù–∞–¥–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ COVID-19 –ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ - –æ—Ç –æ–±—â–µ–≥–æ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏—è –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ –æ—Ç –≥—Ä–∏–ø–ø–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª –≤—Ä–∞—á, —Ç–∞–∫ –∫–∞–∫ –æ–±–∞ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å, –µ–º—É —Ç–æ–∂–µ –Ω—É–∂–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å –∏ –ª–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω—É—é –∏–Ω—Ñ–µ–∫—Ü–∏—é –∏ —á–∞—Å—Ç–æ —è–≤–ª—è—é—Ç—Å—è –µ–µ –±–µ—Å—Å–∏–º–ø—Ç–æ–º–Ω—ã–º–∏ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ —É –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –¥–Ω—è–º  1-3-–π –¥–µ–Ω—å. –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–µ–π. –£ 80% –∑–∞–±–æ–ª–µ–≤—à–∏—Ö COVID-19 –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–æ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å —Å –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å –º–µ—Ç–æ–¥–æ–º –ü–¶–†¬†–¥–∞–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å SARS-CoV-2, –º–∞–∑–æ–∫ (PCR, Coronavirus SARS-CoV-2, –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å SARS-CoV-2, –º–∞–∑–æ–∫ (PCR, Coronavirus SARS-CoV-2, –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å—É SARS-CoV-2; (Anti-SARS-CoV-2, IgM and IgG, –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–æ–º —É–∂–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∏–Ω—Ñ–µ–∫—Ü–∏–µ–π –∏ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–ª. –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞ COVID-19, –ø—Ä–æ—Å—Ç—É–¥–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –∏ –≥—Ä–∏–ø–ø–∞. –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–∏ (COVID-19). –ú–∏–Ω–∑–¥—Ä–∞–≤ –†–§, –≤–µ—Ä—Å–∏—è –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å –ù–∞—Ä—É—à–µ–Ω–∏–µ –∏–ª–∏ –ø–æ—Ç–µ—Ä—è –≤–∫—É—Å–∞  –ù–∞—Ä—É—à–µ–Ω–∏–µ –∏ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å covid 19 COVID-19: –º–µ—Ö–∞–Ω–∏–∑–º—ã –∏ –ø—É—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏, –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å 2 —Ç—è–∂–µ–ª–æ–≥–æ –æ—Å—Ç—Ä–æ–≥–æ —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ —Å–∏–Ω–¥—Ä–æ–º–∞ –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –±–æ–ª–µ–∑–Ω—å—é 2019 (COronaVIrus Disease 2019 –ö–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å COVID-19 –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –Ω–æ–≤–æ–π –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–æ–π –∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–Ω–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è (COVID-19) –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥—Ä—É–ø–ø–µ'.split(' ')

    const word = words[parseInt(Math.random() * words.length)]

    return {
      varData: {
        word
      },
      code: `
        var word = "${word}";
      `
    }
  },
  testedCodeFunction: (varData, word) => !varData.word.match(/(–∫–æ—Ä–æ–Ω–∞–≤–∏|COVID-19)/) && !word.match(/(–∫–æ—Ä–æ–Ω–∞–≤–∏|COVID-19)/),
  confirm: false
}, {
  id: 13,
  emoji: 'üçí',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –±–æ–ª—å—à—É—é –ø–æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–æ–∫—É. –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ <selection>length</selection> ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä <selection>></selection> ‚Äî –±–æ–ª—å—à–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(a)</selection> –∏–ª–∏ <selection>console.log(b)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const words = `–ê–±–∏—É,–ê–±—Ä–∏–∫–æ—Å,–ê–≤–æ–∫–∞–¥–æ,–ê–π–≤–∞,–ê–∫–∏,–ê–ª–∏–±–µ—Ä—Ü–∏—è,–ê–ª—ã—á–∞,–ê–º–±–∞—Ä–µ–ª–ª–∞,–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∞–±—Ä–∏–∫–æ—Å,–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –æ—Ä–µ—Ö,–ê–Ω–∞–Ω–∞—Å,–ê–Ω–Ω–æ–Ω–∞ –≥–æ—Ä–Ω–∞—è,–ê–Ω–Ω–æ–Ω–∞ –∫–æ–ª—é—á–∞—è,–ê–Ω–Ω–æ–Ω–∞ —Å–µ—Ç—á–∞—Ç–∞—è,–ê–Ω–Ω–æ–Ω–∞ —á–µ—Ä–∏–º–æ–ª–∞,–ê–Ω–Ω–æ–Ω–∞ —á–µ—à—É–π—á–∞—Ç–∞—è,–ê–Ω—Ç–∏–ª—å—Å–∫–∏–π –∫—Ä—ã–∂–æ–≤–Ω–∏–∫,–ê–ø–µ–ª—å—Å–∏–Ω,–ê—Ä–∞–±–∏–∫–∞,–ê—Ä–∞–∑–∞,–ê—Ä–∞—Ö–∏—Å,–ê—Ä–±—É–∑ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π,–ê—Å—Ç—Ä–æ–∫–∞—Ä–∏—É–º –∫–æ–ª—é—á–∏–π,–ê—Ç–∏–º–æ–π—è,–ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –∫–æ–ª—é—á–∏–π –æ–≥—É—Ä–µ—Ü,–ê—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ç–∞–º–∞—Ä–∏–Ω–¥,–ë–∞–∫–∞—É,–ë–∞–∫–ª–∞–∂–∞–Ω,–ë–∞–ª–∏—è,–ë–∞–Ω–∞–Ω—ã,–ë–∞–æ–±–∞–±,–ë–∞—Ä–±–∞–¥–∏–Ω (–ë–æ–ª—å—à–∞—è –≥—Ä–∞–Ω–∞–¥–∏–ª–ª–∞),–ë–∞—Ä–±–∞–¥–æ—Å—Å–∫–∞—è –≤–∏—à–Ω—è,–ë–∞—Ä—Ö–∞—Ç–Ω–æ–µ —è–±–ª–æ–∫–æ,–ë–∞—ç–ª—å,–ë–µ–ª–∞—è —Å–∞–ø–æ—Ç–∞,–ë–µ—Ä–≥–∞–º–æ—Ç,–ë–∏–ª–∏–º–±–∏,–ë–∏—Ä—Å–æ–Ω–∏–º–∞,–ë–ª–∏–≥–∏—è –≤–∫—É—Å–Ω–∞—è,–ë–æ–ª—å—à–æ–π –∑–º–µ–∏–Ω—ã–π —Ñ—Ä—É–∫—Ç,–ë–æ—è—Ä—ã—à–Ω–∏–∫,–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π –æ—Ä–µ—Ö,–ë—ã—á—å–µ —Å–µ—Ä–¥—Ü–µ,–í–∞–º–ø–∏,–í–∞–Ω–≥–µ—Ä–∏—è,–í–∞–Ω–∏–ª—å,–í–∏–Ω–æ–≥—Ä–∞–¥,–í–∏—à–Ω—è,–í–æ–∞–≤–∞–Ω–≥–∞,–í–æ–¥—è–Ω–æ–µ(–≤–æ—Å–∫–æ–≤–æ–µ) —è–±–ª–æ–∫–æ,–ì–∞–Ω–¥–∞—Ä–∏—è,–ì–µ–Ω–∏–ø–∞,–ì–∏–±–∏—Å–∫—É—Å —Å—ä–µ–¥–æ–±–Ω—ã–π,–ì–Ω–µ—Ç—É–º –≥–Ω–µ–º–æ–Ω,–ì–æ–ª—É–±–∏–Ω–∞—è —Å–ª–∏–≤–∞,–ì–æ–ª—É–±–æ–π –∫–≤–∞–Ω–¥–æ–Ω–≥,–ì–æ—Ä–ª—è–Ω–∫–∞,–ì–æ—Ä—å–∫–∏–π –æ–≥—É—Ä–µ—Ü,–ì—Ä–∞–Ω–∞–¥–∏–ª–ª–∞ (–ú–∞—Ä–∞–∫—É–π–∞),–ì—Ä–∞–Ω–∞–¥–∏–ª–ª–∞ –±–æ–ª—å—à–∞—è (–ë–∞—Ä–±–∞–¥–∏–Ω),–ì—Ä–∞–Ω–∞–¥–∏–ª–ª–∞ —Å–ª–∞–¥–∫–∞—è,–ì—Ä–∞–Ω–∞—Ç,–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç,–ì—Ä—É–º–∏—á–∞–º–∞,–ì—Ä—É—à–∞,–ì—É–∞–π—è–≤–∞ –∑–µ–º–ª—è–Ω–∏—á–Ω–∞—è,–ì—É–∞–π—è–≤–∞ –∫–æ—Å—Ç–∞-—Ä–∏–∫–∞–Ω—Å–∫–∞—è,–ì—É–∞–π—è–≤–∞ –∫—Ä–∞—Å–Ω–∞—è,–ì—É–∞–π—è–≤–∞ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è,–ì—É–∞—Ä–∞–Ω–∞,–î–∞–≤–∏–¥—Å–æ–Ω–∏—è,–î–∞–º—Å–∫–∏–µ –ø–∞–ª—å—á–∏–∫–∏,–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ —è–±–ª–æ–∫–æ,–î–µ—Å–µ—Ä—Ç–Ω—ã–π –∫–≤–∞–Ω–¥–æ–Ω–≥,–î–∂–µ–∫—Ñ—Ä—É—Ç,–î—Ä–µ–≤–µ—Å–Ω–∞—è –∫–∞–ª–µ–±–∞—Å–∞,–î—É–∫—É,–î—É—Ä–∏–∞–Ω,–î—É—Ä–∏–∞–Ω —Ü–∏–±–µ—Ç–∏–Ω–æ–≤—ã–π,–î—ã–Ω–Ω–∞—è –≥—Ä—É—à–∞,–î—ã–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ,–î—ã–Ω—è –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è,–ï–≤–≥–µ–Ω–∏—è –æ–¥–Ω–æ—Ü–≤–µ—Ç–∫–æ–≤–∞—è,–ñ–∞–±–æ—Ç–∏–∫–∞–±–∞,–ó–≤–µ–∑–¥—á–∞—Ç–æ–µ —è–±–ª–æ–∫–æ,–ó–µ–º–ª—è–Ω–∏—á–Ω–∞—è –≥—Ä—É—à–∞,–ó–µ–º–ª—è–Ω–∏—á–Ω—ã–π —Ç–æ–º–∞—Ç,–ó–µ–º–ª—è–Ω–æ–π –æ—Ä–µ—Ö,–ó–∏–∑–∏—Ñ—É—Å –º–∞–≤—Ä–∏—Ç–∞–Ω—Å–∫–∏–π,–ó–æ–ª–æ—Ç–∞—è —Å–ª–∏–≤–∞,–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π –∞–ø–µ–ª—å—Å–∏–Ω,–ò–Ω–¥–∏–π—Å–∫–∏–µ –±–æ–±—ã,–ò–Ω–¥–∏–π—Å–∫–∏–π –∏–Ω–∂–∏—Ä,–ò–Ω–¥–∏–π—Å–∫–∏–π –º–∏–Ω–¥–∞–ª—å,–ò–Ω–¥–∏–π—Å–∫–æ–µ —Ä–æ–∑–æ–≤–æ–µ —è–±–ª–æ–∫–æ,–ò–Ω–∂–∏—Ä,–ö–∞–±–∞—á–∫–∏,–ö–∞–∏–Ω–∏—Ç–æ,–ö–∞–∫–∞–æ,–ö–∞–∫—Ç—É—Å –∏–Ω–∂–∏—Ä–æ–≤—ã–π,–ö–∞–ª–∞–º–æ–Ω–¥–∏–Ω,–ö–∞–ª–µ–±–∞—Å–∞,–ö–∞–ª–∏–Ω–∞,–ö–∞–Ω–∞—Ä–∏—É–º —è–π—Ü–µ–≤–∏–¥–Ω—ã–π,–ö–∞–ø—Å–∫–∏–π –∫—Ä—ã–∂–æ–≤–Ω–∏–∫,–ö–∞—Ä–∞–º–±–æ–ª–∞,–ö–∞—Å,–ö–≤–∏–Ω–∏,–ö–≤–∏–Ω—Å–ª–µ–Ω–¥—Å–∫–∏–π –æ—Ä–µ—Ö,–ö–µ–ø–µ–ª—å,–ö–µ—Ç–∞–º–±–∏–ª–ª–∞,–ö–∏–≤–∞–Ω–æ,–ö–∏–≤–∏,–ö–∏—Ç–∞–π—Å–∫–∞—è –∫–∞–ª–µ–±–∞—Å–∞,–ö–ª–µ–º–µ–Ω—Ç–∏–Ω,–ö–æ–∫–∫–æ–ª–æ–±–∞ —è–≥–æ–¥–æ–Ω–æ—Å–Ω–∞—è,–ö–æ–∫–æ—Å,–ö–æ—Ä–∏–ª–ª–∞,–ö–æ—Ñ–µ–π–Ω—ã–µ –¥–µ—Ä–µ–≤—å—è,–ö—Ä–∞–Ω–∂–∏,–ö—É–º–∫–≤–∞—Ç –æ–≤–∞–ª—å–Ω—ã–π,–ö—É–ø—É–∞—Å—É,–ö—É—Ä–±–∞—Ä–∏–ª,–ö—É—Å—Ç–æ–≤–æ–π –≥–æ—Ä–æ—à–µ–∫,–õ–∞–π–º –Ω–∞—Å—Ç–æ—è—â–∏–π,–õ–∞–Ω–≥—Å–∞—Ç,–õ–∞–Ω—Å–∏—É–º –¥–æ–º–∞—à–Ω–∏–π,–õ–µ—É—Ü–µ–Ω–∞ —Å–≤–µ—Ç–ª–æ–≥–æ–ª–æ–≤—á–∞—Ç–∞—è,–õ–∏–±–µ—Ä–∏–∫–∞,–õ–∏–∫–∞–Ω–∏—è,–õ–∏–º–æ–Ω –≥—Ä—É–±–æ–∫–æ–∂–∏—Å—Ç—ã–π,–õ–∏–º–æ–Ω –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π,–õ–∏–º–æ–Ω –ú–µ–π–µ—Ä–∞,–õ–∏–º–æ–Ω–Ω–∞—è –æ—Å–∏–Ω–∞,–õ–∏—á–∏,–õ–æ–±–∏—è,–õ–æ–∂–Ω—ã–π –º–∞–Ω–≥—É—Å—Ç–∞–Ω,–õ–æ—Ö —É–∑–∫–æ–ª–∏—Å—Ç–Ω—ã–π,–õ—É–∫—É–º–∞,–õ—É–ª–æ,–õ—é—Ñ—Ñ–∞ –æ—Å—Ç—Ä–æ—Ä–µ–±—Ä–∏—Å—Ç–∞—è,–ú–∞–±–æ–ª–æ,–ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä—Å–∫–∞—è —Å–ª–∏–≤–∞,–ú–∞–∫–∞–¥–∞–º–∏—è —Ü–µ–ª—å–Ω–æ–ª–∏—Å—Ç–Ω–∞—è,–ú–∞–ª–∞–±–∞—Ä—Å–∫–∞—è —Ç—ã–∫–≤–∞,–ú–∞–ª–∞–±–∞—Ä—Å–∫–∏–π –∞–ø–µ–ª—å—Å–∏–Ω,–ú–∞–ª–∞–π—Å–∫–æ–µ —è–±–ª–æ–∫–æ,–ú–∞–ª—É–∫–æ,–ú–∞–ª—å–ø–∏–≥–∏—è –≥—Ä–∞–Ω–∞—Ç–æ–ª–∏—Å—Ç–Ω–∞—è,–ú–∞–º–º–µ—è –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è,–ú–∞–º–æ–Ω—á–∏–ª–ª–æ (–õ–∞–π–º –∏—Å–ø–∞–Ω—Å–∫–∏–π),–ú–∞–Ω–≥–æ –±–ª–∞–≥–æ—É—Ö–∞—é—â–µ–µ,–ú–∞–Ω–≥–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–µ,–ú–∞–Ω–≥–æ –∏–Ω–¥–∏–π—Å–∫–æ–µ,–ú–∞–Ω–≥–æ —Ä–µ–∑–∫–æ –ø–∞—Ö–Ω—É—â–µ–µ,–ú–∞–Ω–≥–æ—Å—Ç–∞–Ω,–ú–∞–Ω–≥—É—Å—Ç–∞–Ω,–ú–∞–Ω–¥–∞—Ä–∏–Ω,–ú–∞–Ω–∏–ª–∫–∞—Ä–∞,–ú–∞—Ä–∞–∫—É–π—è,–ú–∞—Ä–º–µ–ª–∞–¥–Ω—ã–π –ø–ª–æ–¥,–ú–∞—Ä—É–ª–∞,–ú–∞—É—Ä–∏—Ü–∏—è –∏–∑–≤–∏–ª–∏—Å—Ç–∞—è,–ú–∞—à,–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è –∑–µ–º–ª—è–Ω–∞—è –≤–∏—à–Ω—è,–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∏–π –æ–≥—É—Ä–µ—Ü,–ú–µ–ª–∏–Ω–∂–æ,–ú–æ–∫–≤–∞,–ú–æ–º–±–∏–Ω –∂–µ–ª—Ç—ã–π,–ú–æ–º–±–∏–Ω –∫—Ä–∞—Å–Ω—ã–π,–ú–æ–º–æ—Ä–¥–∏–∫–∞,–ú–æ—Ä–∏–Ω–¥–∞,–ú—É–Ω–¥—É,–ú—É—Å–∫–∞—Ç–Ω—ã–π –æ—Ä–µ—Ö,–ú—É—à–º—É–ª–∞ —è–ø–æ–Ω—Å–∫–∞—è,–ù–∞—Ä–∞–Ω—Ö–∏–ª–ª–∞,–ù—è–º-–Ω—è–º,–ù–µ–∫—Ç–∞—Ä–∏–Ω (–ø–æ–¥–≤–∏–¥ –ø–µ—Ä—Å–∏–∫–∞),–û–±–µ–∑—å—è–Ω–∏–π —Ö–ª–µ–±,–û–≥—É—Ä–µ—Ü,–û–≥—É—Ä–µ—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ,–û—Ä–µ—Ö –∫–µ—à—å—é,–ü–∞–ª—å–º–∞ –∫–∞—Ç–µ—Ö—É,–ü–∞–ª—å–º–∞ –∫–æ–∫–æ—Å–æ–≤–∞—è,–ü–∞–ª—å–º–∞ –º–∞—Å–ª–∏—á–Ω–∞—è –∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∞—è,–ü–∞–ª—å–º–∞ –ø–µ—Ä—Å–∏–∫–æ–≤–∞—è,–ü–∞–ª—å—á–∏–∫–æ–≤—ã–π –ª–∞–π–º,–ü–∞–ø–∞–π—è,–ü–∞–ø–∞–π—è –≥–æ—Ä–Ω–∞—è,–ü–∞–ø–µ–¥–∞,–ü–∞–ø—Ä–∏–∫–∞,–ü–∞—Ä–∞-–≥—É–∞–π—è–≤–∞,–ü–∞—Ä–∫–∏—è –∫—Ä–∞—Å–∏–≤–∞—è,–ü–∞—Å—Å–∏—Ñ–ª–æ—Ä–∞ —Å—ä–µ–¥–æ–±–Ω–∞—è,–ü–µ–∫—É–∏,–ü–µ–ø–∏–Ω–æ,–ü–µ—Ä–µ—Ü,–ü–µ—Ä–µ—Ü –∫–∞–π–µ–Ω—Å–∫–∏–π,–ü–µ—Ä–µ—Ü —Å—Ç—Ä—É—á–∫–æ–≤—ã–π,–ü–µ—Ä—Å–∏–∫,–ü–µ—Ä—É–∞–Ω—Å–∫–∞—è –≤–∏—à–Ω—è,–ü–∏—Ç–∞–π—è,–ü–∏—Ç–æ–º–±–∞,–ü–∏—à–∏,–ü–æ–º–µ–ª–æ,–ü–æ–º–µ—Ä–∞–Ω–µ—Ü,–ü–æ–º–∏–¥–æ—Ä,–ü–æ–º–ø–µ–ª—å–º—É—Å,–ü–æ–Ω—Ü–∏—Ä—É—Å (–Ω–µ—Å—ä–µ–¥–æ–±–Ω—ã–π –ø–ª–æ–¥),–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –≤–∏–Ω–æ–≥—Ä–∞–¥,–ü—É—Ç–µ—Ä–∏—è,–ü—É–ª–∞—Å–∞–Ω,–†–∞–∫—É–º-—Å–∞–ª–∞–∫–∫–∞,–†–∞–º–±–∞–π,–†–∞–º–±—É—Ç–∞–Ω,–†–æ–±—É—Å—Ç–∞,–†–æ–∑–æ–≤–æ–µ —è–±–ª–æ–∫–æ,–†–æ–ª–ª–∏–Ω–∏—è —Å–ª–∏–∑–∏—Å—Ç–∞—è,–°–∞–ª–∞–∫–∫–∞,–°–∞–ª–∞–∫–∫–∞ —Å–∫—É—á–µ–Ω–Ω–∞—è,–°–∞–ª–∞–º–∞–Ω–¥—Ä–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ,–°–∞–Ω—Ç–æ–ª,–°–∞–ø–æ–¥–∏–ª–ª–∞,–°–∞—Ç—Å—É–º–∞,–°–∞—Ö–∞—Ä–Ω–æ–µ —è–±–ª–æ–∫–æ,–°–∞—Ö–∞—Ä–Ω—ã–π –≥–æ—Ä–æ—à–µ–∫,–°–≤–µ—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ,–°–≤–∏—Ç–∏,–°–∏–∑–∏–≥–∏—É–º –∞–∫–≤–µ—É–º,–°–∏–∑–∏–≥–∏—É–º –º–∞–ª–∞–∫–∫—Å–∫–∏–π,–°–∏–∑–∏–≥–∏—É–º —è–º–±–æ–∑–∞,–°–∏–Ω–≥–∞–ø—É—Ä—Å–∫–∏–π –º–∏–Ω–¥–∞–ª—å,–°–ª–∏–≤–∞,–°–ª–∏–≤–∞ –∫–∞–∫–∞–¥—É,–°–ª–æ–Ω–æ–≤—å–µ —è–±–ª–æ–∫–æ,–°–º–µ—Ç–∞–Ω–Ω–æ–µ —è–±–ª–æ–∫–æ,–°–æ–Ω—Å–æ—è,–°–æ—è,–°–ø–∞—Ä–∂–µ–≤–∞—è —Ñ–∞—Å–æ–ª—å,–°—Ç—Ä–∞—Å—Ç–æ—Ü–≤–µ—Ç,–°—É—Ä–∏–Ω–∞–º—Å–∫–∞—è –≤–∏—à–Ω—è,–°—ä–µ–¥–æ–±–Ω—ã–π —Ç–∞–∏—Ç—è–Ω—Å–∫–∏–π –æ—Ä–µ—Ö,–¢–∞–∏—Ç—è–Ω—Å–∫–æ–µ —è–±–ª–æ–∫–æ,–¢–∞–∫–∞–∫–æ,–¢–∞–º–∞—Ä–∏–ª–ª–æ,–¢–∞–º–∞—Ä–∏–Ω–¥,–¢–∞–Ω–∂–µ—Ä–∏–Ω,–¢–µ—Ä–º–∏–Ω–∞–ª–∏—è –∫–∞—Ç–∞–ø–ø–∞,–¢–æ–º–∞—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π,–¢–æ–º–∞—Ç–Ω–æ–µ –¥–µ—Ä–µ–≤–æ,–¢—É–∫—É–º–∞,–¢—É–ø–∞,–¢—ã–∫–≤–∞ –±—É—Ç—ã–ª–æ—á–Ω–∞—è,–¢—ã–∫–≤–∞ –≤–æ—Å–∫–æ–≤–∞—è,–¢—ã–∫–≤–∞ –º—É—Å–∫–∞—Ç–Ω–∞—è,–¢—ã–∫–≤–∞ –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω–∞—è,–¢—ã–∫–≤–∞ —Ñ–∏–≥–æ–ª–∏—Å—Ç–Ω–∞—è,–¢—ã–∫–≤–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ,–§–µ–π—Ö–æ–∞,–§–µ—Ä–æ–Ω–∏—è –ª–∏–º–æ–Ω–Ω–∞—è,–§–µ—Ä–æ–Ω–∏—è —Å–ª–æ–Ω–æ–≤–∞—è,–§–∏–∑–∞–ª–∏—Å –∑–µ–º–ª—è–Ω–∏—á–Ω—ã–π,–§–∏–ª–∏–ø–ø–∏–Ω—Å–∫–æ–µ —Ä–æ–∑–æ–≤–æ–µ —è–±–ª–æ–∫–æ,–§–∏–ª–ª–∞–Ω—Ç—É—Å –∫–∏—Å–ª—ã–π,–§–∏–Ω–∏–∫,–§–ª–∞–∫—É—Ä—Ü–∏—è,–•–ª–µ–±–Ω–æ–µ –¥–µ—Ä–µ–≤–æ,–•–ª–µ–±–Ω—ã–µ –±–æ–±—ã,–•—É—Ä–º–∞ –≤–æ—Å—Ç–æ—á–Ω–∞—è (—è–ø–æ–Ω—Å–∫–∞—è),–¶–µ–π–ª–æ–Ω—Å–∫–∏–π –∫—Ä—ã–∂–æ–≤–Ω–∏–∫,–¶–∏–∫–ª–∞–Ω—Ç–µ—Ä–∞,–¶—É–∫–∫–∏–Ω–∏,–ß–∞–π–æ—Ç,–ß–∞–º–ø–µ–¥–∞–∫,–ß–µ—Ä–µ—à–Ω—è,–ß–µ—Ä–∏–º–æ–π—è,–ß–µ—Ä–Ω–∞—è –≥—É–∞–π—è–≤–∞,–ß–µ—Ä–Ω–∞—è —Å–∞–ø–æ—Ç–∞,–ß–µ—Ä–Ω–∞—è —Ö—É—Ä–º–∞,–ß–µ—Ä–Ω—ã–π —Ç–∞–º–∞—Ä–∏–Ω–¥,–ß–∏–ª–∏,–ß–∏–ª–∏–±—É—Ö–∞ –∫–æ–ª—é—á–∞—è,–ß—É–ø–∞,–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –¥–µ—Ä–µ–≤–æ,–Ø–±–ª–æ–∫–æ,–Ø–±–ª–æ–∫–æ-–∫–∞–∂—É,–Ø–±–æ—Ç–∏–∫–∞–±–∞,–Ø–º–∞–π—Å–∫–∞—è –≤–∏—à–Ω—è,–Ø—Ç–æ–±–∞`.split(',')

    const a = words[parseInt(Math.random() * words.length)]
    const b = words[parseInt(Math.random() * words.length)]

    return {
      varData: {
        a,
        b
      },
      code: `
        var a = "${a}";
        var b = "${b}";
      `
    }
  },
  testedCodeFunction: (varData, word) => varData.a.length > varData.b.length ? varData.a.length === word.length : varData.b.length === word.length,
  confirm: false
}, {
  id: 14,
  emoji: 'üîç',
  description: '–ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–π–¥–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã <selection>==</selection> ‚Äî —Ä–∞–≤–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: <selection>console.log(first_name + " " + last_name)</selection> —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.',
  defaultCodeFunction: old => {
    const first_names = ["–í–ª–∞–¥", "–í–ª–∞–¥", "–í–ª–∞–¥", "–¢–æ–ª–∏–∫", "–ñ–µ–Ω—è", "–ò–≥–æ—Ä—å", "–ê–Ω—Ç–æ–Ω", "–°—Ç–∞—Å", "–î–µ–Ω–∏—Å", "–°–∞—à–∞"]
    const last_names = ["–ü–µ—Ç—Ä–æ–≤", "–°–¥–æ—Ä–æ–≤", "–ü–æ–Ω–∞–º–∞—Ä–µ–≤", "–ü–æ–Ω–∞–º–∞—Ä–µ–≤", "–ü–æ–Ω–∞–º–∞—Ä–µ–≤"]

    const first_name = first_names[parseInt(Math.random() * first_names.length)]
    const last_name = last_names[parseInt(Math.random() * last_names.length)]

    return {
      varData: {
        first_name,
        last_name
      },
      code: `
        var first_name = "${first_name}";
        var last_name = "${last_name}";
        var findUser = "–í–ª–∞–¥ –ü–æ–Ω–∞–º–∞—Ä–µ–≤"
      `
    }
  },
  testedCodeFunction: (varData, findUser) => (varData.first_name + ' ' + varData.last_name) === findUser,
  confirm: false
}].map(task => ({
  ...task,
  testedCodeFunction: (...args) => {
    try {
      return task.testedCodeFunction(...args)
    } catch (e) {
      return false
    }
  },
  defaultCodeFunction: (a) => {
    const defaultCodeFunction = task.defaultCodeFunction(a)
    return {
      ...defaultCodeFunction,
      code: defaultCodeFunction.code.replace(/        /gi, '').replace(/\n/, '')
    }
  }
}))


export default TASKS
